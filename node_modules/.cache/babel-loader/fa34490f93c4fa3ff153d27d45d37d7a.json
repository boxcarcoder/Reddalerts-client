{"ast":null,"code":"import _objectSpread from\"/Users/brendan/Documents/development/portfolio/Reddalerts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/brendan/Documents/development/portfolio/Reddalerts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{Fragment,useState,useEffect}from'react';import{Redirect}from'react-router-dom';import{connect}from'react-redux';import{submitSubredditInfo,fetchUserSubreddits}from'../../actions/subreddit';import DashboardTable from'./DashboardTable';var Dashboard=function Dashboard(_ref){var submitSubredditInfo=_ref.submitSubredditInfo,fetchUserSubreddits=_ref.fetchUserSubreddits,subreddits=_ref.subredditState.subreddits,_ref$authState=_ref.authState,id=_ref$authState.loggedInUser.id,isAuthenticated=_ref$authState.isAuthenticated;// need to populate the redux state using useEffect before rendering dashboard.\nuseEffect(function(){fetchUserSubreddits(id);},[]);var _useState=useState({subredditName:'',subredditKeywords:''}),_useState2=_slicedToArray(_useState,2),formData=_useState2[0],setFormData=_useState2[1];var subredditName=formData.subredditName,subredditKeywords=formData.subredditKeywords;var handleSubmit=function handleSubmit(e){e.preventDefault();submitSubredditInfo({id:id,subredditName:subredditName,subredditKeywords:subredditKeywords});};var handleSubredditName=function handleSubredditName(e){setFormData(_objectSpread(_objectSpread({},formData),{},{subredditName:e.target.value}));};var handleSubredditKeywords=function handleSubredditKeywords(e){setFormData(_objectSpread(_objectSpread({},formData),{},{subredditKeywords:e.target.value}));};var displaySubredditTables=function displaySubredditTables(){return subreddits.map(function(subreddit){return/*#__PURE__*/_jsx(DashboardTable,{subreddit:subreddit});});};if(!isAuthenticated){return/*#__PURE__*/_jsx(Redirect,{to:\"/register\"});}return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"defaultHeader\",children:\"ReddAlerts\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"submissionBox\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Subreddits To Monitor\"}),/*#__PURE__*/_jsx(\"div\",{className:\"line\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"p\",{children:\"Subreddit (/r/)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"technology\",value:subredditName,onChange:handleSubredditName}),/*#__PURE__*/_jsx(\"p\",{className:\"smallText\",children:\"One subreddit per submission.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"line\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Keywords\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"javascript, reactjs\",value:subredditKeywords,onChange:handleSubredditKeywords}),/*#__PURE__*/_jsx(\"p\",{className:\"smallText\",children:\"Comma separated list.\"}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Submit\"})]})]}),displaySubredditTables()]});};var mapStateToProps=function mapStateToProps(state){return{subredditState:state.subreddit,authState:state.auth};};export default connect(mapStateToProps,{submitSubredditInfo:submitSubredditInfo,fetchUserSubreddits:fetchUserSubreddits})(Dashboard);","map":{"version":3,"sources":["/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/components/dashboard/Dashboard.js"],"names":["React","Fragment","useState","useEffect","Redirect","connect","submitSubredditInfo","fetchUserSubreddits","DashboardTable","Dashboard","subreddits","subredditState","authState","id","loggedInUser","isAuthenticated","subredditName","subredditKeywords","formData","setFormData","handleSubmit","e","preventDefault","handleSubredditName","target","value","handleSubredditKeywords","displaySubredditTables","map","subreddit","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n} from '../../actions/subreddit';\nimport DashboardTable from './DashboardTable';\n\nconst Dashboard = ({\n  submitSubredditInfo,\n  fetchUserSubreddits,\n  subredditState: { subreddits },\n  authState: {\n    loggedInUser: { id },\n    isAuthenticated,\n  },\n}) => {\n  // need to populate the redux state using useEffect before rendering dashboard.\n  useEffect(() => {\n    fetchUserSubreddits(id);\n  }, []);\n\n  const [formData, setFormData] = useState({\n    subredditName: '',\n    subredditKeywords: '',\n  });\n\n  const { subredditName, subredditKeywords } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitSubredditInfo({ id, subredditName, subredditKeywords });\n  };\n\n  const handleSubredditName = (e) => {\n    setFormData({\n      ...formData,\n      subredditName: e.target.value,\n    });\n  };\n\n  const handleSubredditKeywords = (e) => {\n    setFormData({\n      ...formData,\n      subredditKeywords: e.target.value,\n    });\n  };\n\n  const displaySubredditTables = () => {\n    return subreddits.map((subreddit) => (\n      <DashboardTable subreddit={subreddit} />\n    ));\n  };\n\n  if (!isAuthenticated) {\n    return <Redirect to='/register' />;\n  }\n\n  return (\n    <Fragment>\n      <h1 className='defaultHeader'>ReddAlerts</h1>\n      <div className='submissionBox'>\n        <h2>Subreddits To Monitor</h2>\n        <div className='line'></div>\n        <form onSubmit={handleSubmit}>\n          <p>Subreddit (/r/)</p>\n          <input\n            type='text'\n            placeholder='technology'\n            value={subredditName}\n            onChange={handleSubredditName}\n          />\n          <p className='smallText'>One subreddit per submission.</p>\n          <div className='line'></div>\n\n          <p>Keywords</p>\n          <input\n            type='text'\n            placeholder='javascript, reactjs'\n            value={subredditKeywords}\n            onChange={handleSubredditKeywords}\n          />\n          <p className='smallText'>Comma separated list.</p>\n\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n\n      {displaySubredditTables()}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  subredditState: state.subreddit,\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n})(Dashboard);\n"]},"metadata":{},"sourceType":"module"}