{"ast":null,"code":"import { SUBMIT_SUBREDDIT_INFO, SUBMIT_SUBREDDIT_INFO_FAIL, FETCH_SUBREDDITS, FETCH_SUBREDDITS_FAIL, DELETE_SUBREDDIT, DELETE_SUBREDDIT_FAIL, UPDATE_SUBREDDIT_KEYWORDS } from './types';\nimport axios from 'axios';\nexport const submitSubredditInfo = ({\n  id,\n  subredditName,\n  subredditKeywords\n}) => async dispatch => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      id,\n      subredditName,\n      subredditKeywords\n    });\n    const res = await axios.post('/api/submitSubredditInfo', body, config);\n\n    if (res.data.update === 'true') {\n      dispatch({\n        type: UPDATE_SUBREDDIT_KEYWORDS,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: SUBMIT_SUBREDDIT_INFO,\n        payload: res.data\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: SUBMIT_SUBREDDIT_INFO_FAIL,\n      payload: {\n        msg: err\n      }\n    });\n  }\n};\nexport const fetchUserSubreddits = id => async dispatch => {\n  try {\n    const res = await axios.get('/api/fetchSubredditsInfo', {\n      params: {\n        id\n      }\n    });\n    dispatch({\n      type: FETCH_SUBREDDITS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_SUBREDDITS_FAIL,\n      payload: {\n        msg: err\n      }\n    });\n  }\n};\nexport const deleteMonitoredSubreddit = (id, subredditName) => async (dispatch) => {\n  try {\n    const res = await axios.delete('/api/deleteMonitoredSubreddit', {\n      params: {\n        id,\n        subredditName\n      }\n    });\n    dispatch({\n      type: DELETE_SUBREDDIT,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log('shit: ', err);\n  }\n};","map":{"version":3,"sources":["/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/subreddit.js"],"names":["SUBMIT_SUBREDDIT_INFO","SUBMIT_SUBREDDIT_INFO_FAIL","FETCH_SUBREDDITS","FETCH_SUBREDDITS_FAIL","DELETE_SUBREDDIT","DELETE_SUBREDDIT_FAIL","UPDATE_SUBREDDIT_KEYWORDS","axios","submitSubredditInfo","id","subredditName","subredditKeywords","dispatch","config","headers","body","JSON","stringify","res","post","data","update","type","payload","err","msg","fetchUserSubreddits","get","params","deleteMonitoredSubreddit","delete","console","log"],"mappings":"AAAA,SACEA,qBADF,EAEEC,0BAFF,EAGEC,gBAHF,EAIEC,qBAJF,EAKEC,gBALF,EAMEC,qBANF,EAOEC,yBAPF,QAQO,SARP;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAAC;AAClCC,EAAAA,EADkC;AAElCC,EAAAA,aAFkC;AAGlCC,EAAAA;AAHkC,CAAD,KAI7B,MAAOC,QAAP,IAAoB;AACxB,MAAI;AACF;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAKA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BR,MAAAA,EAD0B;AAE1BC,MAAAA,aAF0B;AAG1BC,MAAAA;AAH0B,KAAf,CAAb;AAMA,UAAMO,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAW,0BAAX,EAAuCJ,IAAvC,EAA6CF,MAA7C,CAAlB;;AAEA,QAAIK,GAAG,CAACE,IAAJ,CAASC,MAAT,KAAoB,MAAxB,EAAgC;AAC9BT,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEhB,yBADC;AAEPiB,QAAAA,OAAO,EAAEL,GAAG,CAACE;AAFN,OAAD,CAAR;AAID,KALD,MAKO;AACLR,MAAAA,QAAQ,CAAC;AACPU,QAAAA,IAAI,EAAEtB,qBADC;AAEPuB,QAAAA,OAAO,EAAEL,GAAG,CAACE;AAFN,OAAD,CAAR;AAID;AACF,GA1BD,CA0BE,OAAOI,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAErB,0BADC;AAEPsB,MAAAA,OAAO,EAAE;AAAEE,QAAAA,GAAG,EAAED;AAAP;AAFF,KAAD,CAAR;AAID;AACF,CArCM;AAuCP,OAAO,MAAME,mBAAmB,GAAIjB,EAAD,IAAQ,MAAOG,QAAP,IAAoB;AAC7D,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMX,KAAK,CAACoB,GAAN,CAAU,0BAAV,EAAsC;AACtDC,MAAAA,MAAM,EAAE;AACNnB,QAAAA;AADM;AAD8C,KAAtC,CAAlB;AAMAG,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEpB,gBADC;AAEPqB,MAAAA,OAAO,EAAEL,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GAXD,CAWE,OAAOI,GAAP,EAAY;AACZZ,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEnB,qBADC;AAEPoB,MAAAA,OAAO,EAAE;AAAEE,QAAAA,GAAG,EAAED;AAAP;AAFF,KAAD,CAAR;AAID;AACF,CAlBM;AAoBP,OAAO,MAAMK,wBAAwB,GAAG,CAACpB,EAAD,EAAKC,aAAL,KAAuB,OAC7DE,QAD6D,KAE1D;AACH,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMX,KAAK,CAACuB,MAAN,CAAa,+BAAb,EAA8C;AAC9DF,MAAAA,MAAM,EAAE;AACNnB,QAAAA,EADM;AAENC,QAAAA;AAFM;AADsD,KAA9C,CAAlB;AAOAE,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAElB,gBADC;AAEPmB,MAAAA,OAAO,EAAEL,GAAG,CAACE;AAFN,KAAD,CAAR;AAID,GAZD,CAYE,OAAOI,GAAP,EAAY;AACZO,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,GAAtB;AACD;AACF,CAlBM","sourcesContent":["import {\n  SUBMIT_SUBREDDIT_INFO,\n  SUBMIT_SUBREDDIT_INFO_FAIL,\n  FETCH_SUBREDDITS,\n  FETCH_SUBREDDITS_FAIL,\n  DELETE_SUBREDDIT,\n  DELETE_SUBREDDIT_FAIL,\n  UPDATE_SUBREDDIT_KEYWORDS,\n} from './types';\nimport axios from 'axios';\n\nexport const submitSubredditInfo = ({\n  id,\n  subredditName,\n  subredditKeywords,\n}) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const body = JSON.stringify({\n      id,\n      subredditName,\n      subredditKeywords,\n    });\n\n    const res = await axios.post('/api/submitSubredditInfo', body, config);\n\n    if (res.data.update === 'true') {\n      dispatch({\n        type: UPDATE_SUBREDDIT_KEYWORDS,\n        payload: res.data,\n      });\n    } else {\n      dispatch({\n        type: SUBMIT_SUBREDDIT_INFO,\n        payload: res.data,\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: SUBMIT_SUBREDDIT_INFO_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const fetchUserSubreddits = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/fetchSubredditsInfo', {\n      params: {\n        id,\n      },\n    });\n\n    dispatch({\n      type: FETCH_SUBREDDITS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_SUBREDDITS_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const deleteMonitoredSubreddit = (id, subredditName) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.delete('/api/deleteMonitoredSubreddit', {\n      params: {\n        id,\n        subredditName,\n      },\n    });\n\n    dispatch({\n      type: DELETE_SUBREDDIT,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('shit: ', err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}