{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/dashboard/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { submitSubredditInfo, fetchUserSubreddits } from '../../actions/subreddit';\nimport DashboardTable from './DashboardTable';\n\nconst Dashboard = ({\n  submitSubredditInfo,\n  fetchUserSubreddits,\n  subredditState: {\n    subreddits\n  },\n  authState: {\n    loggedInUser: {\n      id\n    },\n    isAuthenticated\n  }\n}) => {\n  _s();\n\n  // need to populate the redux state using useEffect before rendering dashboard.\n  useEffect(() => {\n    fetchUserSubreddits(id);\n  }, []);\n  const [formData, setFormData] = useState({\n    subredditName: '',\n    subredditKeywords: ''\n  });\n  const {\n    subredditName,\n    subredditKeywords\n  } = formData;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    submitSubredditInfo({\n      id,\n      subredditName,\n      subredditKeywords\n    });\n  };\n\n  const handleSubredditName = e => {\n    setFormData({ ...formData,\n      subredditName: e.target.value\n    });\n  };\n\n  const handleSubredditKeywords = e => {\n    setFormData({ ...formData,\n      subredditKeywords: e.target.value\n    });\n  };\n\n  const displaySubredditTables = () => {\n    return subreddits.map(subreddit => /*#__PURE__*/_jsxDEV(DashboardTable, {\n      subreddit: subreddit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this));\n  };\n\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"defaultHeader\",\n      children: \"ReddAlerts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submissionBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Subreddits To Monitor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Subreddit (/r/)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"technology\",\n          value: subredditName,\n          onChange: handleSubredditName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"smallText\",\n          children: \"One subreddit per submission.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Keywords\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"javascript, reactjs\",\n          value: subredditKeywords,\n          onChange: handleSubredditKeywords\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"smallText\",\n          children: \"Comma separated list.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), displaySubredditTables()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"BoUKJIsHSdUmtXN6vO3vrfSspM0=\");\n\n_c = Dashboard;\n\nconst mapStateToProps = state => ({\n  subredditState: state.subreddit,\n  authState: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  submitSubredditInfo,\n  fetchUserSubreddits\n})(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/dashboard/Dashboard.js"],"names":["React","Fragment","useState","useEffect","Redirect","connect","submitSubredditInfo","fetchUserSubreddits","DashboardTable","Dashboard","subredditState","subreddits","authState","loggedInUser","id","isAuthenticated","formData","setFormData","subredditName","subredditKeywords","handleSubmit","e","preventDefault","handleSubredditName","target","value","handleSubredditKeywords","displaySubredditTables","map","subreddit","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n} from '../../actions/subreddit';\nimport DashboardTable from './DashboardTable';\n\nconst Dashboard = ({\n  submitSubredditInfo,\n  fetchUserSubreddits,\n  subredditState: { subreddits },\n  authState: {\n    loggedInUser: { id },\n    isAuthenticated,\n  },\n}) => {\n  // need to populate the redux state using useEffect before rendering dashboard.\n  useEffect(() => {\n    fetchUserSubreddits(id);\n  }, []);\n\n  const [formData, setFormData] = useState({\n    subredditName: '',\n    subredditKeywords: '',\n  });\n\n  const { subredditName, subredditKeywords } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitSubredditInfo({ id, subredditName, subredditKeywords });\n  };\n\n  const handleSubredditName = (e) => {\n    setFormData({\n      ...formData,\n      subredditName: e.target.value,\n    });\n  };\n\n  const handleSubredditKeywords = (e) => {\n    setFormData({\n      ...formData,\n      subredditKeywords: e.target.value,\n    });\n  };\n\n  const displaySubredditTables = () => {\n    return subreddits.map((subreddit) => (\n      <DashboardTable subreddit={subreddit} />\n    ));\n  };\n\n  if (!isAuthenticated) {\n    return <Redirect to='/register' />;\n  }\n\n  return (\n    <Fragment>\n      <h1 className='defaultHeader'>ReddAlerts</h1>\n      <div className='submissionBox'>\n        <h2>Subreddits To Monitor</h2>\n        <div className='line'></div>\n        <form onSubmit={handleSubmit}>\n          <p>Subreddit (/r/)</p>\n          <input\n            type='text'\n            placeholder='technology'\n            value={subredditName}\n            onChange={handleSubredditName}\n          />\n          <p className='smallText'>One subreddit per submission.</p>\n          <div className='line'></div>\n\n          <p>Keywords</p>\n          <input\n            type='text'\n            placeholder='javascript, reactjs'\n            value={subredditKeywords}\n            onChange={handleSubredditKeywords}\n          />\n          <p className='smallText'>Comma separated list.</p>\n\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n\n      {displaySubredditTables()}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  subredditState: state.subreddit,\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n})(Dashboard);\n"]},"metadata":{},"sourceType":"module"}