{"ast":null,"code":"import { SUBMIT_SUBREDDIT_INFO, SUBMIT_SUBREDDIT_INFO_FAIL, FETCH_SUBREDDITS, FETCH_SUBREDDITS_FAIL, DELETE_SUBREDDIT, DELETE_SUBREDDIT_FAIL, UPDATE_SUBREDDIT_INFO } from './types';\nimport axios from 'axios';\nexport const submitSubredditInfo = ({\n  username,\n  subredditName,\n  subredditKeywords\n}) => async dispatch => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      subredditName,\n      subredditKeywords\n    });\n    console.log('firing submitSubredditInfo() action.');\n    const res = await axios.post('/api/submitSubredditInfo', body, config);\n\n    if (res.data.update === 'true') {\n      console.log('update: ', res.data.subreddit);\n      dispatch({\n        type: UPDATE_SUBREDDIT_INFO,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: SUBMIT_SUBREDDIT_INFO,\n        payload: res.data\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: SUBMIT_SUBREDDIT_INFO_FAIL,\n      payload: {\n        msg: err\n      }\n    });\n  }\n};\nexport const fetchUserSubreddits = username => async dispatch => {\n  try {\n    const res = await axios.get('/api/fetchSubredditsInfo', {\n      params: {\n        username\n      }\n    });\n    dispatch({\n      type: FETCH_SUBREDDITS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_SUBREDDITS_FAIL,\n      payload: {\n        msg: err\n      }\n    });\n  }\n};\nexport const deleteMonitoredSubreddit = (username, subredditName) => async (dispatch) => {\n  try {\n    console.log('firing delete subreddit action().');\n    const res = await axios.delete('/api/deleteMonitoredSubreddit', {\n      params: {\n        username,\n        subredditName\n      }\n    });\n    dispatch({\n      type: DELETE_SUBREDDIT,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log('shit: ', err);\n  }\n};","map":{"version":3,"sources":["/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/subreddit.js"],"names":["SUBMIT_SUBREDDIT_INFO","SUBMIT_SUBREDDIT_INFO_FAIL","FETCH_SUBREDDITS","FETCH_SUBREDDITS_FAIL","DELETE_SUBREDDIT","DELETE_SUBREDDIT_FAIL","UPDATE_SUBREDDIT_INFO","axios","submitSubredditInfo","username","subredditName","subredditKeywords","dispatch","config","headers","body","JSON","stringify","console","log","res","post","data","update","subreddit","type","payload","err","msg","fetchUserSubreddits","get","params","deleteMonitoredSubreddit","delete"],"mappings":"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","sourcesContent":["import {\n  SUBMIT_SUBREDDIT_INFO,\n  SUBMIT_SUBREDDIT_INFO_FAIL,\n  FETCH_SUBREDDITS,\n  FETCH_SUBREDDITS_FAIL,\n  DELETE_SUBREDDIT,\n  DELETE_SUBREDDIT_FAIL,\n  UPDATE_SUBREDDIT_INFO,\n} from './types';\nimport axios from 'axios';\n\nexport const submitSubredditInfo = ({\n  username,\n  subredditName,\n  subredditKeywords,\n}) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const body = JSON.stringify({\n      username,\n      subredditName,\n      subredditKeywords,\n    });\n\n    console.log('firing submitSubredditInfo() action.');\n    const res = await axios.post('/api/submitSubredditInfo', body, config);\n\n    if (res.data.update === 'true') {\n      console.log('update: ', res.data.subreddit);\n      dispatch({\n        type: UPDATE_SUBREDDIT_INFO,\n        payload: res.data,\n      });\n    } else {\n      dispatch({\n        type: SUBMIT_SUBREDDIT_INFO,\n        payload: res.data,\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: SUBMIT_SUBREDDIT_INFO_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const fetchUserSubreddits = (username) => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/fetchSubredditsInfo', {\n      params: {\n        username,\n      },\n    });\n\n    dispatch({\n      type: FETCH_SUBREDDITS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_SUBREDDITS_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const deleteMonitoredSubreddit = (username, subredditName) => async (\n  dispatch\n) => {\n  try {\n    console.log('firing delete subreddit action().');\n    const res = await axios.delete('/api/deleteMonitoredSubreddit', {\n      params: {\n        username,\n        subredditName,\n      },\n    });\n\n    dispatch({\n      type: DELETE_SUBREDDIT,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('shit: ', err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}