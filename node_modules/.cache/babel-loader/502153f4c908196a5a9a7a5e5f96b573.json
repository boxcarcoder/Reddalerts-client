{"ast":null,"code":"import _regeneratorRuntime from\"/Users/brendan/Documents/development/portfolio/Reddalerts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/brendan/Documents/development/portfolio/Reddalerts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{SUBMIT_SUBREDDIT_INFO,SUBMIT_SUBREDDIT_INFO_FAIL,FETCH_SUBREDDITS,FETCH_SUBREDDITS_FAIL,DELETE_SUBREDDIT,DELETE_SUBREDDIT_FAIL,UPDATE_SUBREDDIT_KEYWORDS}from'./types';import axios from'axios';export var submitSubredditInfo=function submitSubredditInfo(_ref){var id=_ref.id,subredditName=_ref.subredditName,subredditKeywords=_ref.subredditKeywords;return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var config,body,res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;// configuration of the HTTP request to the backend\nconfig={headers:{'Content-Type':'application/json'}};body=JSON.stringify({id:id,subredditName:subredditName,subredditKeywords:subredditKeywords});_context.next=5;return axios.post('/api/submitSubredditInfo',body,config);case 5:res=_context.sent;if(res.data.update==='true'){dispatch({type:UPDATE_SUBREDDIT_KEYWORDS,payload:res.data});}else{dispatch({type:SUBMIT_SUBREDDIT_INFO,payload:res.data});}_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);dispatch({type:SUBMIT_SUBREDDIT_INFO_FAIL,payload:{msg:_context.t0}});case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function(_x){return _ref2.apply(this,arguments);};}();};export var fetchUserSubreddits=function fetchUserSubreddits(id){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){var res;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get('/api/fetchSubredditsInfo',{params:{id:id}});case 3:res=_context2.sent;dispatch({type:FETCH_SUBREDDITS,payload:res.data});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);dispatch({type:FETCH_SUBREDDITS_FAIL,payload:{msg:_context2.t0}});case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));return function(_x2){return _ref3.apply(this,arguments);};}();};export var deleteMonitoredSubreddit=function deleteMonitoredSubreddit(id,subredditName){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return axios.delete('/api/deleteMonitoredSubreddit',{params:{id:id,subredditName:subredditName}});case 3:res=_context3.sent;dispatch({type:DELETE_SUBREDDIT,payload:res.data});_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);console.log('shit: ',_context3.t0);case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));return function(_x3){return _ref4.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/subreddit.js"],"names":["SUBMIT_SUBREDDIT_INFO","SUBMIT_SUBREDDIT_INFO_FAIL","FETCH_SUBREDDITS","FETCH_SUBREDDITS_FAIL","DELETE_SUBREDDIT","DELETE_SUBREDDIT_FAIL","UPDATE_SUBREDDIT_KEYWORDS","axios","submitSubredditInfo","id","subredditName","subredditKeywords","dispatch","config","headers","body","JSON","stringify","post","res","data","update","type","payload","msg","fetchUserSubreddits","get","params","deleteMonitoredSubreddit","delete","console","log"],"mappings":"2WAAA,OACEA,qBADF,CAEEC,0BAFF,CAGEC,gBAHF,CAIEC,qBAJF,CAKEC,gBALF,CAMEC,qBANF,CAOEC,yBAPF,KAQO,SARP,CASA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,UACjCC,CAAAA,EADiC,MACjCA,EADiC,CAEjCC,aAFiC,MAEjCA,aAFiC,CAGjCC,iBAHiC,MAGjCA,iBAHiC,iGAI7B,iBAAOC,QAAP,sJAEF;AACMC,MAHJ,CAGa,CACbC,OAAO,CAAE,CACP,eAAgB,kBADT,CADI,CAHb,CAQIC,IARJ,CAQWC,IAAI,CAACC,SAAL,CAAe,CAC1BR,EAAE,CAAFA,EAD0B,CAE1BC,aAAa,CAAbA,aAF0B,CAG1BC,iBAAiB,CAAjBA,iBAH0B,CAAf,CARX,uBAcgBJ,CAAAA,KAAK,CAACW,IAAN,CAAW,0BAAX,CAAuCH,IAAvC,CAA6CF,MAA7C,CAdhB,QAcIM,GAdJ,eAgBF,GAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,GAAoB,MAAxB,CAAgC,CAC9BT,QAAQ,CAAC,CACPU,IAAI,CAAEhB,yBADC,CAEPiB,OAAO,CAAEJ,GAAG,CAACC,IAFN,CAAD,CAAR,CAID,CALD,IAKO,CACLR,QAAQ,CAAC,CACPU,IAAI,CAAEtB,qBADC,CAEPuB,OAAO,CAAEJ,GAAG,CAACC,IAFN,CAAD,CAAR,CAID,CA1BC,+EA4BFR,QAAQ,CAAC,CACPU,IAAI,CAAErB,0BADC,CAEPsB,OAAO,CAAE,CAAEC,GAAG,YAAL,CAFF,CAAD,CAAR,CA5BE,oEAJ6B,iEAA5B,CAuCP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAChB,EAAD,kGAAQ,kBAAOG,QAAP,sKAErBL,CAAAA,KAAK,CAACmB,GAAN,CAAU,0BAAV,CAAsC,CACtDC,MAAM,CAAE,CACNlB,EAAE,CAAFA,EADM,CAD8C,CAAtC,CAFqB,QAEjCU,GAFiC,gBAQvCP,QAAQ,CAAC,CACPU,IAAI,CAAEpB,gBADC,CAEPqB,OAAO,CAAEJ,GAAG,CAACC,IAFN,CAAD,CAAR,CARuC,mFAavCR,QAAQ,CAAC,CACPU,IAAI,CAAEnB,qBADC,CAEPoB,OAAO,CAAE,CAAEC,GAAG,aAAL,CAFF,CAAD,CAAR,CAbuC,sEAAR,kEAA5B,CAoBP,MAAO,IAAMI,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACnB,EAAD,CAAKC,aAAL,kGAAuB,kBAC7DE,QAD6D,sKAIzCL,CAAAA,KAAK,CAACsB,MAAN,CAAa,+BAAb,CAA8C,CAC9DF,MAAM,CAAE,CACNlB,EAAE,CAAFA,EADM,CAENC,aAAa,CAAbA,aAFM,CADsD,CAA9C,CAJyC,QAIrDS,GAJqD,gBAW3DP,QAAQ,CAAC,CACPU,IAAI,CAAElB,gBADC,CAEPmB,OAAO,CAAEJ,GAAG,CAACC,IAFN,CAAD,CAAR,CAX2D,mFAgB3DU,OAAO,CAACC,GAAR,CAAY,QAAZ,eAhB2D,sEAAvB,kEAAjC","sourcesContent":["import {\n  SUBMIT_SUBREDDIT_INFO,\n  SUBMIT_SUBREDDIT_INFO_FAIL,\n  FETCH_SUBREDDITS,\n  FETCH_SUBREDDITS_FAIL,\n  DELETE_SUBREDDIT,\n  DELETE_SUBREDDIT_FAIL,\n  UPDATE_SUBREDDIT_KEYWORDS,\n} from './types';\nimport axios from 'axios';\n\nexport const submitSubredditInfo = ({\n  id,\n  subredditName,\n  subredditKeywords,\n}) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const body = JSON.stringify({\n      id,\n      subredditName,\n      subredditKeywords,\n    });\n\n    const res = await axios.post('/api/submitSubredditInfo', body, config);\n\n    if (res.data.update === 'true') {\n      dispatch({\n        type: UPDATE_SUBREDDIT_KEYWORDS,\n        payload: res.data,\n      });\n    } else {\n      dispatch({\n        type: SUBMIT_SUBREDDIT_INFO,\n        payload: res.data,\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: SUBMIT_SUBREDDIT_INFO_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const fetchUserSubreddits = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get('/api/fetchSubredditsInfo', {\n      params: {\n        id,\n      },\n    });\n\n    dispatch({\n      type: FETCH_SUBREDDITS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_SUBREDDITS_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const deleteMonitoredSubreddit = (id, subredditName) => async (\n  dispatch\n) => {\n  try {\n    const res = await axios.delete('/api/deleteMonitoredSubreddit', {\n      params: {\n        id,\n        subredditName,\n      },\n    });\n\n    dispatch({\n      type: DELETE_SUBREDDIT,\n      payload: res.data,\n    });\n  } catch (err) {\n    console.log('shit: ', err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}