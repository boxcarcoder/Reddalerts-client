{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, LOGOUT } from './types';\nimport axios from 'axios';\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Convert JS object into JSON to send to Flask.\n\n    const body = JSON.stringify({\n      email,\n      password\n    }); // Store the logged in user's token into a redux state for authentication purposes.\n\n    const res = await axios.post('/api/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const register = ({\n  username,\n  email,\n  password\n}) => async dispatch => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Convert JS object into JSON to send to Flask.\n\n    const body = JSON.stringify({\n      username,\n      email,\n      password\n    }); // Store the logged in user's token into a redux state for authentication purposes.\n\n    const res = await axios.post('/api/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/auth.js"],"names":["LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","LOGOUT","axios","login","email","password","dispatch","config","headers","body","JSON","stringify","res","post","type","payload","data","err","register","username","logout"],"mappings":"AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,MALF,QAMO,SANP;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB,MAAOC,QAAP,IAAoB;AAChE,MAAI;AACF;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf,CAFE,CAQF;;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf,CAAb,CATE,CAWF;;AACA,UAAMO,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,EAA+BF,MAA/B,CAAlB;AAEAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEjB,aADC;AAEPkB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAlBD,CAkBE,OAAOC,GAAP,EAAY;AACZX,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGD;AACF,CAxBM;AA0BP,OAAO,MAAMoB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYf,EAAAA,KAAZ;AAAmBC,EAAAA;AAAnB,CAAD,KAAmC,MAAOC,QAAP,IAAoB;AAC7E,MAAI;AACF;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf,CAFE,CAQF;;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEQ,MAAAA,QAAF;AAAYf,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,KAAf,CAAb,CATE,CAWF;;AACA,UAAMO,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,eAAX,EAA4BJ,IAA5B,EAAkCF,MAAlC,CAAlB;AAEAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEf,gBADC;AAEPgB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAlBD,CAkBE,OAAOC,GAAP,EAAY;AACZX,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEd;AADC,KAAD,CAAR;AAGD;AACF,CAxBM;AA0BP,OAAO,MAAMoB,MAAM,GAAG,MAAM,MAAOd,QAAP,IAAoB;AAC9CA,EAAAA,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEb;AADC,GAAD,CAAR;AAGD,CAJM","sourcesContent":["import {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGOUT,\n} from './types';\nimport axios from 'axios';\n\nexport const login = ({ email, password }) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    // Convert JS object into JSON to send to Flask.\n    const body = JSON.stringify({ email, password });\n\n    // Store the logged in user's token into a redux state for authentication purposes.\n    const res = await axios.post('/api/login', body, config);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\nexport const register = ({ username, email, password }) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    // Convert JS object into JSON to send to Flask.\n    const body = JSON.stringify({ username, email, password });\n\n    // Store the logged in user's token into a redux state for authentication purposes.\n    const res = await axios.post('/api/register', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\nexport const logout = () => async (dispatch) => {\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}