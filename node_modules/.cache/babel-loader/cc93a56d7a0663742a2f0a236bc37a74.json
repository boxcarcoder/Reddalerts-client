{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_SUCCESS, REGISTER_FAIL } from './types';\nimport axios from 'axios';\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Convert JS object into JSON to send to Flask.\n\n    const body = JSON.stringify({\n      email,\n      password\n    }); // Store the logged in user's token into a redux state for authentication purposes.\n\n    const res = await axios.post('/api/login', body, config);\n    console.log('heard back from login api route.');\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const register = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Convert JS object into JSON to send to Flask.\n\n    const body = JSON.stringify({\n      email,\n      password\n    }); // Store the logged in user's token into a redux state for authentication purposes.\n\n    const res = await axios.post('/api/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/brendan/Documents/development/portfolio/Reddalerts/client/src/actions/auth.js"],"names":["LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","axios","login","email","password","dispatch","config","headers","body","JSON","stringify","res","post","console","log","type","payload","data","err","register"],"mappings":"AAAA,SACEA,aADF,EAEEC,UAFF,EAGEC,gBAHF,EAIEC,aAJF,QAKO,SALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB,MAAOC,QAAP,IAAoB;AAChE,MAAI;AACF;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf,CAFE,CAQF;;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf,CAAb,CATE,CAWF;;AACA,UAAMO,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,EAA+BF,MAA/B,CAAlB;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACAT,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAElB,aADC;AAEPmB,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFN,KAAD,CAAR;AAID,GAnBD,CAmBE,OAAOC,GAAP,EAAY;AACZb,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEjB;AADC,KAAD,CAAR;AAGD;AACF,CAzBM;AA2BP,OAAO,MAAMqB,QAAQ,GAAG,CAAC;AAAEhB,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB,MAAOC,QAAP,IAAoB;AACnE,MAAI;AACF;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf,CAFE,CAQF;;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf,CAAb,CATE,CAWF;;AACA,UAAMO,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,eAAX,EAA4BJ,IAA5B,EAAkCF,MAAlC,CAAlB;AAEAD,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEhB,gBADC;AAEPiB,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFN,KAAD,CAAR;AAID,GAlBD,CAkBE,OAAOC,GAAP,EAAY;AACZb,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEf;AADC,KAAD,CAAR;AAGD;AACF,CAxBM","sourcesContent":["import {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from './types';\nimport axios from 'axios';\n\nexport const login = ({ email, password }) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    // Convert JS object into JSON to send to Flask.\n    const body = JSON.stringify({ email, password });\n\n    // Store the logged in user's token into a redux state for authentication purposes.\n    const res = await axios.post('/api/login', body, config);\n\n    console.log('heard back from login api route.');\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\nexport const register = ({ email, password }) => async (dispatch) => {\n  try {\n    // configuration of the HTTP request to the backend\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    // Convert JS object into JSON to send to Flask.\n    const body = JSON.stringify({ email, password });\n\n    // Store the logged in user's token into a redux state for authentication purposes.\n    const res = await axios.post('/api/register', body, config);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}