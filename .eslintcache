[{"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/index.js":"1","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/layout/Landing.js":"2","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/dashboard/Dashboard.js":"3","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/profile/Settings.js":"4","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/auth/Register.js":"5","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/dashboard/DashboardTable.js":"6","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/index.js":"7","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/subreddit.js":"8","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/App.js":"9","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/auth/Login.js":"10","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/auth.js":"11","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/auth.js":"12","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/types.js":"13","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/store.js":"14","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/subreddit.js":"15","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/layout/Navbar.js":"16","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/profile.js":"17","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/profile.js":"18"},{"size":197,"mtime":1606953285248,"results":"19","hashOfConfig":"20"},{"size":977,"mtime":1617836416866,"results":"21","hashOfConfig":"20"},{"size":2605,"mtime":1625773148028,"results":"22","hashOfConfig":"20"},{"size":2139,"mtime":1625761995357,"results":"23","hashOfConfig":"20"},{"size":2126,"mtime":1617662562757,"results":"24","hashOfConfig":"20"},{"size":1263,"mtime":1627418503168,"results":"25","hashOfConfig":"20"},{"size":208,"mtime":1625704691074,"results":"26","hashOfConfig":"20"},{"size":1504,"mtime":1627418406050,"results":"27","hashOfConfig":"20"},{"size":1093,"mtime":1617662560632,"results":"28","hashOfConfig":"20"},{"size":1709,"mtime":1617229672197,"results":"29","hashOfConfig":"20"},{"size":2804,"mtime":1625785648167,"results":"30","hashOfConfig":"20"},{"size":1119,"mtime":1625705721254,"results":"31","hashOfConfig":"20"},{"size":764,"mtime":1614022082386,"results":"32","hashOfConfig":"20"},{"size":381,"mtime":1608232226144,"results":"33","hashOfConfig":"20"},{"size":5716,"mtime":1627516934002,"results":"34","hashOfConfig":"20"},{"size":803,"mtime":1617662624019,"results":"35","hashOfConfig":"20"},{"size":912,"mtime":1625785648246,"results":"36","hashOfConfig":"20"},{"size":596,"mtime":1625706155275,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1gfybfy",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/index.js",[],["80","81"],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/layout/Landing.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/dashboard/Dashboard.js",["82"],"import React, { Fragment, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n} from '../../actions/subreddit';\nimport DashboardTable from './DashboardTable';\n\nconst Dashboard = ({\n  submitSubredditInfo,\n  fetchUserSubreddits,\n  subredditState: { subreddits },\n  authState: {\n    loggedInUser: { id },\n    isAuthenticated,\n  },\n}) => {\n  // need to populate the redux state using useEffect before rendering dashboard.\n  useEffect(() => {\n    fetchUserSubreddits(id);\n  }, []);\n\n  const [formData, setFormData] = useState({\n    subredditName: '',\n    subredditKeywords: '',\n  });\n\n  const { subredditName, subredditKeywords } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitSubredditInfo({ id, subredditName, subredditKeywords });\n    setFormData({\n      subredditName: '',\n      subredditKeywords: '',\n    });\n  };\n\n  const handleSubredditName = (e) => {\n    setFormData({\n      ...formData,\n      subredditName: e.target.value,\n    });\n  };\n\n  const handleSubredditKeywords = (e) => {\n    setFormData({\n      ...formData,\n      subredditKeywords: e.target.value,\n    });\n  };\n\n  const displaySubredditTables = () => {\n    return subreddits.map((subreddit) => (\n      <DashboardTable subreddit={subreddit} />\n    ));\n  };\n\n  if (!isAuthenticated) {\n    return <Redirect to='/register' />;\n  }\n\n  return (\n    <Fragment>\n      <h1 className='defaultHeader'>ReddAlerts</h1>\n      <div className='submissionBox'>\n        <h2>Subreddits To Monitor</h2>\n        <div className='line'></div>\n        <form onSubmit={handleSubmit}>\n          <p>Subreddit (/r/)</p>\n          <input\n            type='text'\n            placeholder='technology'\n            value={subredditName}\n            onChange={handleSubredditName}\n          />\n          <p className='smallText'>One subreddit per submission.</p>\n          <div className='line'></div>\n\n          <p>Keywords</p>\n          <input\n            type='text'\n            placeholder='javascript, reactjs'\n            value={subredditKeywords}\n            onChange={handleSubredditKeywords}\n          />\n          <p className='smallText'>Comma separated list.</p>\n\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n\n      {displaySubredditTables()}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  subredditState: state.subreddit,\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n})(Dashboard);\n","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/profile/Settings.js",[],["83","84"],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/auth/Register.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/dashboard/DashboardTable.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/index.js",[],["85","86"],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/subreddit.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/App.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/auth/Login.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/auth.js",["87","88"],"import {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGOUT,\n  SUBMIT_PHONE_NUMBER,\n  DELETE_PHONE_NUMBER,\n} from './types';\nimport axios from 'axios';\n\nexport const login =\n  ({ email, password }) =>\n  async (dispatch) => {\n    try {\n      // configuration of the HTTP request to the backend\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      // Convert JS object into JSON to send to Flask.\n      const body = JSON.stringify({ email, password });\n\n      // Store the logged in user's token into a redux state for authentication purposes.\n      const res = await axios.post('/api/login', body, config);\n      // const res = await axios.post('/api/login', body, config);\n\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    }\n  };\n\nexport const register =\n  ({ username, email, password }) =>\n  async (dispatch) => {\n    try {\n      // configuration of the HTTP request to the backend\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      // Convert JS object into JSON to send to Flask.\n      const body = JSON.stringify({ username, email, password });\n\n      // Store the logged in user's token into a redux state for authentication purposes.\n      const res = await axios.post('/api/register', body, config);\n      // const res = await axios.post('/api/register', body, config);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\nexport const logout = () => async (dispatch) => {\n  dispatch({\n    type: LOGOUT,\n  });\n};\n\n// export const submitPhoneNumber =\n//   ({ id, phoneNumber }) =>\n//   async (dispatch) => {\n//     try {\n//       // configuration of the HTTP request to the backend\n//       const config = {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       };\n//       const body = JSON.stringify({\n//         id,\n//         phoneNumber,\n//       });\n\n//       const res = await axios.post(\n//         '/api/submitPhoneNumber',\n//         body,\n//         config\n//       );\n\n//       dispatch({\n//         type: SUBMIT_PHONE_NUMBER,\n//         payload: res.data,\n//       });\n//     } catch (err) {}\n//   };\n\n// export const deletePhoneNumber = (id) => async (dispatch) => {\n//   try {\n//     const res = await axios.delete(\n//       '/api/deletePhoneNumber',\n//       {\n//         params: {\n//           id,\n//         },\n//       }\n//     );\n\n//     dispatch({\n//       type: DELETE_PHONE_NUMBER,\n//       payload: res.data,\n//     });\n//   } catch (err) {}\n// };\n","/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/auth.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/types.js",[],["89","90"],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/store.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/subreddit.js",["91"],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/components/layout/Navbar.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/actions/profile.js",[],"/Users/brendan/Documents/development/portfolio/Reddalerts-client/src/reducers/profile.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":22,"column":6,"nodeType":"98","endLine":22,"endColumn":8,"suggestions":"99"},{"ruleId":"92","replacedBy":"100"},{"ruleId":"94","replacedBy":"101"},{"ruleId":"92","replacedBy":"102"},{"ruleId":"94","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":7,"column":3,"nodeType":"106","messageId":"107","endLine":7,"endColumn":22},{"ruleId":"104","severity":1,"message":"108","line":8,"column":3,"nodeType":"106","messageId":"107","endLine":8,"endColumn":22},{"ruleId":"92","replacedBy":"109"},{"ruleId":"94","replacedBy":"110"},{"ruleId":"104","severity":1,"message":"111","line":7,"column":3,"nodeType":"106","messageId":"107","endLine":7,"endColumn":24},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchUserSubreddits' and 'id'. Either include them or remove the dependency array. If 'fetchUserSubreddits' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["114"],["112"],["113"],["112"],["113"],"no-unused-vars","'SUBMIT_PHONE_NUMBER' is defined but never used.","Identifier","unusedVar","'DELETE_PHONE_NUMBER' is defined but never used.",["112"],["113"],"'DELETE_SUBREDDIT_FAIL' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [fetchUserSubreddits, id]",{"range":"117","text":"118"},[595,597],"[fetchUserSubreddits, id]"]