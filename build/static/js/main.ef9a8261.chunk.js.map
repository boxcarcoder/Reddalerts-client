{"version":3,"sources":["actions/types.js","reducers/auth.js","reducers/subreddit.js","reducers/profile.js","reducers/index.js","store.js","components/layout/Landing.js","img/top-design-subreddits.jpeg","components/auth/Register.js","actions/auth.js","components/auth/Login.js","components/dashboard/DashboardTable.js","actions/subreddit.js","components/dashboard/Dashboard.js","components/layout/Navbar.js","components/profile/Settings.js","actions/profile.js","App.js","index.js"],"names":["LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","REGISTER_SUCCESS","REGISTER_FAIL","SUBMIT_SUBREDDIT_INFO","UPDATE_SUBREDDIT_KEYWORDS","SUBMIT_SUBREDDIT_INFO_FAIL","FETCH_SUBREDDITS","FETCH_SUBREDDITS_FAIL","DELETE_SUBREDDIT","DELETE_SUBREDDIT_FAIL","SUBMIT_PHONE_NUMBER","DELETE_PHONE_NUMBER","initialState","token","localStorage","getItem","loggedInUser","loading","isAuthenticated","subreddits","error","profilePhoneNumber","combineReducers","auth","state","action","type","payload","setItem","user","subreddit","map","subreddit_name","keywords","profile","phone_num","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","Landing","className","to","connect","authState","register","username","email","password","dispatch","a","config","headers","body","JSON","stringify","axios","post","res","data","useState","formData","setFormData","onSubmit","e","preventDefault","placeholder","onChange","target","value","src","authPic","alt","width","href","login","deleteMonitoredSubreddit","id","subredditName","delete","params","colspan","keywordObj","keyword","displayKeywords","onClick","handleDelete","subredditState","submitSubredditInfo","subredditKeywords","update","msg","fetchUserSubreddits","get","useEffect","logout","profileState","submitPhoneNumber","phoneNumber","deletePhoneNumber","App","exact","path","component","Register","Login","Dashboard","Settings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAaA,EAAgB,gBAChBC,EAAa,aACbC,EAAS,SACTC,EAAmB,mBACnBC,EAAgB,gBAChBC,EAAwB,wBACxBC,EAA4B,4BAC5BC,EAA6B,6BAC7BC,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAmB,mBACnBC,EAAwB,wBACxBC,EAAsB,sBACtBC,EAAsB,sBCF7BC,EAAe,CACnBC,MAAOC,aAAaC,QAAQ,SAC5BC,aAAc,KACdC,SAAS,EACTC,iBAAiB,G,QCJbN,EAAe,CACnBO,WAAY,GACZF,SAAS,EACTG,MAAO,ICXHR,EAAe,CACnBS,mBAAoB,KACpBJ,SAAS,GCAIK,4BAAgB,CAC7BC,KHYa,WAAyC,IAA/BC,EAA8B,uDAAtBZ,EAAca,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,KAAK5B,EACL,KAAKG,EAEH,OADAa,aAAac,QAAQ,QAASD,EAAQd,OAC/B,2BACFW,GADL,IAEEN,iBAAiB,EACjBF,aAAcW,EAAQE,OAE1B,KAAK9B,EACL,KAAKG,EACL,KAAKF,EACH,OAAO,2BACFwB,GADL,IAEEN,iBAAiB,EACjBF,aAAc,OAYlB,QACE,OAAOQ,IG1CXM,UFUa,WAAyC,IAA/BN,EAA8B,uDAAtBZ,EAAca,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,KAAKvB,EACH,OAAO,2BACFqB,GADL,IAEEL,WAAW,GAAD,mBAAMK,EAAML,YAAZ,CAAwBQ,EAAQG,cAE9C,KAAKzB,EACH,OAAO,2BACFmB,GADL,IAEEJ,MAAOO,IAEX,KAAKvB,EACH,OAAO,2BACFoB,GADL,IAEEL,WAAYK,EAAML,WAAWY,KAAI,SAACD,GAAD,OAC/BA,EAAUE,iBAAmBL,EAAQG,UAAUE,eAA/C,2BAESF,GAFT,IAGMG,SAAUN,EAAQG,UAAUG,WAE9BH,OAGV,KAAKxB,EACH,OAAO,2BACFkB,GADL,IAEEL,WAAYQ,EAAQR,aAExB,KAAKZ,EACH,OAAO,2BACFiB,GADL,IAEEJ,MAAOO,IAEX,KAAKnB,EACH,OAAO,2BACFgB,GADL,IAEEL,WAAYQ,EAAQR,aAExB,KAAKV,EACH,OAAO,2BACFe,GADL,IAEEJ,MAAOO,IAEX,QACE,OAAOH,IExDXU,QDAa,WAAyC,IAA/BV,EAA8B,uDAAtBZ,EAAca,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,KAAKhB,EAKL,KAAKC,EACH,OAAO,2BACFa,GADL,IAEEH,mBAAoBM,EAAQQ,YAEhC,QACE,OAAOX,MEjBPY,EAAa,CAACC,KAOLC,EANDC,sBACZC,EAHmB,GAKnBC,8BAAoBC,kBAAe,WAAf,EAAmBN,KCwB1BO,EA/BC,WACd,OACE,yBAASC,UAAU,UAAnB,SACE,sBAAKA,UAAU,eAAf,UACE,oBAAIA,UAAU,gBAAd,wBACA,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAAMC,GAAG,YAAYD,UAAU,MAA/B,sBAGA,cAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,MAA5B,sBAIF,sBAAKA,UAAU,SAAf,UACE,yEACA,qBAAKA,UAAU,SACf,wHAIA,qBAAKA,UAAU,SACf,wI,iDCxBK,MAA0B,mDC0F1BE,eAJS,SAACtB,GAAD,MAAY,CAClCuB,UAAWvB,EAAMD,QAGqB,CAAEyB,SC7CxC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,SAApB,8CACA,WAAOC,GAAP,mBAAAC,EAAA,sEAGUC,EAAS,CACbC,QAAS,CACP,eAAgB,qBAKdC,EAAOC,KAAKC,UAAU,CAAET,WAAUC,QAAOC,aAVnD,SAasBQ,IAAMC,KACtB,0CACAJ,EACAF,GAhBN,OAaUO,EAbV,OAoBIT,EAAS,CACP1B,KAAMzB,EACN0B,QAASkC,EAAIC,OAtBnB,gDAyBIV,EAAS,CACP1B,KAAMxB,IA1BZ,yDADA,wDD6Ca4C,EApFE,SAAC,GAAkD,IAAhDE,EAA+C,EAA/CA,SAAuB9B,EAAwB,EAArC6B,UAAa7B,gBAAwB,EACjC6C,mBAAS,CACvCd,SAAU,GACVC,MAAO,GACPC,SAAU,KAJqD,mBAC1Da,EAD0D,KAChDC,EADgD,KAMzDhB,EAA8Be,EAA9Bf,SAAUC,EAAoBc,EAApBd,MAAOC,EAAaa,EAAbb,SA8BzB,OAAIjC,EACK,cAAC,IAAD,CAAU2B,GAAG,cAIpB,oCACE,sBAAKD,UAAU,UAAf,UACE,yCACA,qBAAKA,UAAU,SAEf,uBAAMsB,SAtCS,SAACC,GACpBA,EAAEC,iBAGFpB,EAAS,CAAEC,WAAUC,QAAOC,cAkCxB,UACE,yCACA,uBACEzB,KAAK,OACL2C,YAAY,WACZC,SApCa,SAACH,GACtBF,EAAY,2BACPD,GADM,IAETf,SAAUkB,EAAEI,OAAOC,UAkCbA,MAAOvB,IAET,sCACA,uBACEvB,KAAK,QACL2C,YAAY,iBACZC,SApCU,SAACH,GACnBF,EAAY,2BACPD,GADM,IAETd,MAAOiB,EAAEI,OAAOC,UAkCVA,MAAOtB,IAET,yCACA,uBACExB,KAAK,WACL2C,YAAY,WACZC,SApCa,SAACH,GACtBF,EAAY,2BACPD,GADM,IAETb,SAAUgB,EAAEI,OAAOC,UAkCbA,MAAOrB,IAET,uBAAOzB,KAAK,SAAS8C,MAAM,mBAI/B,qBAAKC,IAAKC,EAASC,IAAI,WAAWC,MAAM,MAAMhC,UAAU,YACxD,4DAC2B,mBAAGiC,KAAK,SAAR,4BETlB/B,eAJS,SAACtB,GAAD,MAAY,CAClCuB,UAAWvB,EAAMD,QAGqB,CAAEuD,MD3DxC,SAAC,GAAD,IAAG5B,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,8CACA,WAAOC,GAAP,mBAAAC,EAAA,sEAGUC,EAAS,CACbC,QAAS,CACP,eAAgB,qBAKdC,EAAOC,KAAKC,UAAU,CAAER,QAAOC,aAVzC,SAasBQ,IAAMC,KACtB,uCACAJ,EACAF,GAhBN,OAaUO,EAbV,OAoBIT,EAAS,CACP1B,KAAM5B,EACN6B,QAASkC,EAAIC,OAtBnB,gDAyBIV,EAAS,CACP1B,KAAM3B,IA1BZ,yDADA,wDC2Da+C,EAjED,SAAC,GAA+C,IAA7CgC,EAA4C,EAA5CA,MAAoB5D,EAAwB,EAArC6B,UAAa7B,gBAAwB,EAC3B6C,mBAAS,CACvCb,MAAO,GACPC,SAAU,KAH+C,mBACpDa,EADoD,KAC1CC,EAD0C,KAKnDf,EAAoBc,EAApBd,MAAOC,EAAaa,EAAbb,SAsBf,OAAIjC,EACK,cAAC,IAAD,CAAU2B,GAAG,eAIpB,oCACE,sBAAKD,UAAU,UAAf,UACE,uCACA,qBAAKA,UAAU,SACf,uBAAMsB,SA7BS,SAACC,GACpBA,EAAEC,iBAEFU,EAAM,CAAE5B,QAAOC,cA0BX,UACE,uBACEzB,KAAK,QACL2C,YAAY,QACZC,SA3BU,SAACH,GACnBF,EAAY,2BACPD,GADM,IAETd,MAAOiB,EAAEI,OAAOC,UAyBVA,MAAOtB,IAET,uBACExB,KAAK,WACL2C,YAAY,WACZC,SA1Ba,SAACH,GACtBF,EAAY,2BACPD,GADM,IAETb,SAAUgB,EAAEI,OAAOC,UAwBbA,MAAOrB,IAET,uBAAOzB,KAAK,SAAS8C,MAAM,iBAI/B,qBAAKC,IAAKC,EAASC,IAAI,QAAQC,MAAM,MAAMhC,UAAU,YACrD,0DACyB,mBAAGiC,KAAK,YAAR,+BCXhB/B,eAJS,SAACtB,GAAD,MAAY,CAClCuB,UAAWvB,EAAMD,QAGqB,CAAEwD,yBC0BxC,SAACC,EAAIC,GAAL,8CAAuB,WAAO7B,GAAP,eAAAC,EAAA,+EAEDM,IAAMuB,OACtB,0DACA,CACEC,OAAQ,CACNH,KACAC,mBAPa,OAEbpB,EAFa,OAYnBT,EAAS,CACP1B,KAAMlB,EACNmB,QAASkC,EAAIC,OAdI,uGAAvB,wDD1BahB,EA9CQ,SAAC,GAMjB,IAAD,IALJhB,UAAaE,EAKT,EALSA,eAAgBC,EAKzB,EALyBA,SAC7B8C,EAII,EAJJA,yBAEkBC,EAEd,EAHJjC,UACE/B,aAAgBgE,GAgBlB,OACE,cAAC,WAAD,UACE,sBAAKpC,UAAU,6BAAf,UACE,wBAAOA,UAAU,iBAAjB,UACE,kCACE,6BACE,oBAAIwC,QAAQ,IAAZ,SAAiBpD,MAEnB,6BACE,qBAAKY,UAAU,cAGnB,gCApBgB,SAACX,GACvB,OAAOA,EAASF,KAAI,SAACsD,GAAD,OAClB,6BACE,6BAAKA,EAAWC,eAiBNC,CAAgBtD,QAE1B,wBAAQW,UAAU,YAAY4C,QAAS,SAACrB,GAAD,OA3BxB,SAACA,GACpBA,EAAEC,iBACFW,EAAyBC,EAAIhD,GAyBqByD,CAAatB,IAA3D,4BE6DOrB,eALS,SAACtB,GAAD,MAAY,CAClCkE,eAAgBlE,EAAMM,UACtBiB,UAAWvB,EAAMD,QAGqB,CACtCoE,oBDxFA,SAAC,GAAD,IAAGX,EAAH,EAAGA,GAAIC,EAAP,EAAOA,cAAeW,EAAtB,EAAsBA,kBAAtB,8CACA,WAAOxC,GAAP,mBAAAC,EAAA,sEAGUC,EAAS,CACbC,QAAS,CACP,eAAgB,qBAGdC,EAAOC,KAAKC,UAAU,CAC1BsB,KACAC,gBACAW,sBAXN,SAcsBjC,IAAMC,KACtB,qDACAJ,EACAF,GAjBN,OAoB4B,UANlBO,EAdV,QAoBYC,KAAK+B,OACXzC,EAAS,CACP1B,KAAMtB,EACNuB,QAASkC,EAAIC,OAGfV,EAAS,CACP1B,KAAMvB,EACNwB,QAASkC,EAAIC,OA5BrB,gDAgCIV,EAAS,CACP1B,KAAMrB,EACNsB,QAAS,CAAEmE,IAAI,EAAD,MAlCpB,yDADA,uDCyFAC,oBDjDiC,SAACf,GAAD,8CAAQ,WAAO5B,GAAP,eAAAC,EAAA,+EAErBM,IAAMqC,IACtB,qDACA,CACEb,OAAQ,CACNH,QANiC,OAEjCnB,EAFiC,OAWvCT,EAAS,CACP1B,KAAMpB,EACNqB,QAASkC,EAAIC,OAbwB,gDAgBvCV,EAAS,CACP1B,KAAMnB,EACNoB,QAAS,CAAEmE,IAAI,EAAD,MAlBuB,yDAAR,wDC+CpBhD,EA1FG,SAAC,GAQZ,IAPL6C,EAOI,EAPJA,oBACAI,EAMI,EANJA,oBACkB5E,EAKd,EALJuE,eAAkBvE,WAKd,IAJJ4B,UACkBiC,EAGd,EAHFhE,aAAgBgE,GAChB9D,EAEE,EAFFA,gBAIF+E,qBAAU,WACRF,EAAoBf,KACnB,IAJC,MAM4BjB,mBAAS,CACvCkB,cAAe,GACfW,kBAAmB,KARjB,mBAMG5B,EANH,KAMaC,EANb,KAWIgB,EAAqCjB,EAArCiB,cAAeW,EAAsB5B,EAAtB4B,kBA2BvB,OAAK1E,EAKH,eAAC,WAAD,WACE,oBAAI0B,UAAU,gBAAd,wBACA,sBAAKA,UAAU,gBAAf,UACE,uDACA,qBAAKA,UAAU,SACf,uBAAMsB,SAnCS,SAACC,GACpBA,EAAEC,iBACFuB,EAAoB,CAAEX,KAAIC,gBAAeW,uBAiCrC,UACE,gDACA,uBACElE,KAAK,OACL2C,YAAY,aACZG,MAAOS,EACPX,SApCkB,SAACH,GAC3BF,EAAY,2BACPD,GADM,IAETiB,cAAed,EAAEI,OAAOC,YAmCpB,mBAAG5B,UAAU,YAAb,2CACA,qBAAKA,UAAU,SAEf,yCACA,uBACElB,KAAK,OACL2C,YAAY,sBACZG,MAAOoB,EACPtB,SAvCsB,SAACH,GAC/BF,EAAY,2BACPD,GADM,IAET4B,kBAAmBzB,EAAEI,OAAOC,YAsCxB,mBAAG5B,UAAU,YAAb,mCAEA,uBAAOlB,KAAK,SAAS8C,MAAM,iBAnC1BrD,EAAWY,KAAI,SAACD,GAAD,OACpB,cAAC,EAAD,CAAgBA,UAAWA,UAKtB,cAAC,IAAD,CAAUe,GAAG,iBCzBTC,eAJS,SAACtB,GAAD,MAAY,CAClCuB,UAAWvB,EAAMD,QAGqB,CAAE2E,OL8CpB,yDAAM,WAAO9C,GAAP,SAAAC,EAAA,sDAC1BD,EAAS,CACP1B,KAAM1B,IAFkB,2CAAN,wDK9CP8C,EA1BA,SAAC,GAAgD,IAAjC5B,EAAgC,EAA7C6B,UAAa7B,gBAAmBgF,EAAa,EAAbA,OAKhD,OACE,cAAC,WAAD,UACGhF,EACC,qBAAK0B,UAAU,SAAf,SACE,eAAC,WAAD,WACE,cAAC,IAAD,CAAMC,GAAG,aAAT,wBACA,cAAC,IAAD,CAAMA,GAAG,YAAT,sBACA,mBAAG2C,QAAS,SAACrB,GAVrB+B,KAU4CrB,KAAK,YAAzC,yBAKF,UCiEK/B,eALS,SAACtB,GAAD,MAAY,CAClCuB,UAAWvB,EAAMD,KACjB4E,aAAc3E,EAAMU,WAGkB,CACtCkE,kBCpFA,SAAC,GAAD,IAAGpB,EAAH,EAAGA,GAAIqB,EAAP,EAAOA,YAAP,8CACA,WAAOjD,GAAP,mBAAAC,EAAA,sEAGUC,EAAS,CACbC,QAAS,CACP,eAAgB,qBAGdC,EAAOC,KAAKC,UAAU,CAC1BsB,KACAqB,gBAVN,SAasB1C,IAAMC,KACtB,mDACAJ,EACAF,GAhBN,OAaUO,EAbV,OAmBIT,EAAS,CACP1B,KAAMhB,EACNiB,QAASkC,EAAIC,OArBnB,yGADA,uDDqFAwC,kBC1D+B,SAACtB,GAAD,8CAAQ,WAAO5B,GAAP,eAAAC,EAAA,+EAEnBM,IAAMuB,OACtB,mDACA,CACEC,OAAQ,CACNH,QAN+B,OAE/BnB,EAF+B,OAWrCT,EAAS,CACP1B,KAAMf,EACNgB,QAASkC,EAAIC,OAbsB,uGAAR,wDDwDlBhB,EAnFE,SAAC,GAOX,IANLsD,EAMI,EANJA,kBACAE,EAKI,EALJA,kBAEkBtB,EAGd,EAJJjC,UACE/B,aAAgBgE,GAEF3D,EACZ,EADJ8E,aAAgB9E,mBACZ,EAC4B0C,mBAAS,CACvCsC,YAAa,KAFX,mBACGrC,EADH,KACaC,EADb,KAKIoC,EAAgBrC,EAAhBqC,YA2CR,OACE,eAAC,WAAD,WACE,oBAAIzD,UAAU,gBAAd,wBACA,sBAAKA,UAAU,aAAf,UACE,0CACA,qBAAKA,UAAU,SA5BfvB,EAEA,cAAC,WAAD,UACE,sBAAKuB,UAAU,uBAAf,UACE,mDAAsBvB,KACtB,wBACEuB,UAAU,oBACV4C,QAAS,SAACrB,GAAD,OAbA,SAACA,GACpBA,EAAEC,iBACFkC,EAAkBtB,GAWQS,CAAatB,IAF/B,yBAWJ,qBAAKvB,UAAU,uBAAf,SACE,qDAaF,uBAAMsB,SAhDS,SAACC,GACpBA,EAAEC,iBACFgC,EAAkB,CAAEpB,KAAIqB,iBA8CpB,UACE,uBACE3E,KAAK,OACL2C,YAAY,eACZG,MAAO6B,EACP/B,SAhDgB,SAACH,GACzBF,EAAY,2BACPD,GADM,IAETqC,YAAalC,EAAEI,OAAOC,YA+ClB,uBAAO9C,KAAK,SAAS8C,MAAM,cAE7B,sDACA,mBAAG5B,UAAU,YAAb,+CE1CO2D,EAlBH,WACV,OACE,cAAC,IAAD,CAAUjE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,eAAC,WAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOkE,OAAK,EAACC,KAAK,IAAIC,UAAW/D,IACjC,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6D,OAAK,EAACC,KAAK,YAAYC,UAAWC,IACzC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASC,UAAWE,IACtC,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,aAAaC,UAAWG,IAC1C,cAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,YAAYC,UAAWI,eCvBrDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ef9a8261.chunk.js","sourcesContent":["export const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGOUT = 'LOGOUT';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const SUBMIT_SUBREDDIT_INFO = 'SUBMIT_SUBREDDIT_INFO';\nexport const UPDATE_SUBREDDIT_KEYWORDS = 'UPDATE_SUBREDDIT_KEYWORDS';\nexport const SUBMIT_SUBREDDIT_INFO_FAIL = 'SUBMIT_SUBREDDIT_INFO_FAIL';\nexport const FETCH_SUBREDDITS = 'FETCH_SUBREDDITS';\nexport const FETCH_SUBREDDITS_FAIL = 'FETCH_SUBREDDITS_FAIL';\nexport const DELETE_SUBREDDIT = 'DELETE_SUBREDDIT';\nexport const DELETE_SUBREDDIT_FAIL = 'DELETE_SUBREDDIT_FAIL';\nexport const SUBMIT_PHONE_NUMBER = 'SUBMIT_PHONE_NUMBER';\nexport const DELETE_PHONE_NUMBER = 'DELETE_PHONE_NUMBER';\n","/* eslint-disable import/no-anonymous-default-export */\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGOUT,\n  // SUBMIT_PHONE_NUMBER,\n  // DELETE_PHONE_NUMBER,\n} from '../actions/types';\n\nconst initialState = {\n  token: localStorage.getItem('token'),\n  loggedInUser: null,\n  loading: false,\n  isAuthenticated: false,\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      localStorage.setItem('token', payload.token);\n      return {\n        ...state,\n        isAuthenticated: true,\n        loggedInUser: payload.user,\n      };\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT:\n      return {\n        ...state,\n        isAuthenticated: false,\n        loggedInUser: null,\n      };\n    // case SUBMIT_PHONE_NUMBER:\n    //   return {\n    //     ...state,\n    //     loggedInUser: payload,\n    //   };\n    // case DELETE_PHONE_NUMBER:\n    //   return {\n    //     ...state,\n    //     loggedInUser: payload,\n    //   };\n    default:\n      return state;\n  }\n}\n","/* eslint-disable import/no-anonymous-default-export */\nimport {\n  SUBMIT_SUBREDDIT_INFO,\n  SUBMIT_SUBREDDIT_INFO_FAIL,\n  FETCH_SUBREDDITS,\n  FETCH_SUBREDDITS_FAIL,\n  DELETE_SUBREDDIT,\n  DELETE_SUBREDDIT_FAIL,\n  UPDATE_SUBREDDIT_KEYWORDS,\n} from '../actions/types';\n\nconst initialState = {\n  subreddits: [],\n  loading: false,\n  error: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SUBMIT_SUBREDDIT_INFO:\n      return {\n        ...state,\n        subreddits: [...state.subreddits, payload.subreddit],\n      };\n    case SUBMIT_SUBREDDIT_INFO_FAIL:\n      return {\n        ...state,\n        error: payload,\n      };\n    case UPDATE_SUBREDDIT_KEYWORDS:\n      return {\n        ...state,\n        subreddits: state.subreddits.map((subreddit) =>\n          subreddit.subreddit_name === payload.subreddit.subreddit_name\n            ? {\n                ...subreddit,\n                keywords: payload.subreddit.keywords,\n              }\n            : subreddit\n        ),\n      };\n    case FETCH_SUBREDDITS:\n      return {\n        ...state,\n        subreddits: payload.subreddits,\n      };\n    case FETCH_SUBREDDITS_FAIL:\n      return {\n        ...state,\n        error: payload,\n      };\n    case DELETE_SUBREDDIT:\n      return {\n        ...state,\n        subreddits: payload.subreddits,\n      };\n    case DELETE_SUBREDDIT_FAIL:\n      return {\n        ...state,\n        error: payload,\n      };\n    default:\n      return state;\n  }\n}\n","/* eslint-disable import/no-anonymous-default-export */\nimport { SUBMIT_PHONE_NUMBER, DELETE_PHONE_NUMBER } from '../actions/types';\n\nconst initialState = {\n  profilePhoneNumber: null,\n  loading: false,\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SUBMIT_PHONE_NUMBER:\n      return {\n        ...state,\n        profilePhoneNumber: payload.phone_num,\n      };\n    case DELETE_PHONE_NUMBER:\n      return {\n        ...state,\n        profilePhoneNumber: payload.phone_num,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport auth from './auth';\nimport subreddit from './subreddit';\nimport profile from './profile';\n\nexport default combineReducers({\n  auth,\n  subreddit,\n  profile,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Landing = () => {\n  return (\n    <section className='landing'>\n      <div className='dark-overlay'>\n        <h1 className='landingHeader'>ReddAlerts</h1>\n        <div className='landingLinks'>\n          <Link to='/register' className='btn'>\n            Register\n          </Link>\n          <Link to='/login' className='btn'>\n            Login\n          </Link>\n        </div>\n        <div className='readMe'>\n          <p>Register to start monitoring Subreddits.</p>\n          <div className='line' />\n          <p>\n            Specify a subreddit you wish to monitor, and keyword(s) of interest\n            for that Subreddit.\n          </p>\n          <div className='line' />\n          <p>\n            Receive text messages of rising posts in each monitored Subreddit\n            that contains your keywords.\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Landing;\n","export default __webpack_public_path__ + \"static/media/top-design-subreddits.b78100bd.jpeg\";","import React, { useState } from 'react';\nimport { register } from '../../actions/auth';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport authPic from '../../img/top-design-subreddits.jpeg';\n\nconst Register = ({ register, authState: { isAuthenticated } }) => {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const { username, email, password } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Send the form data to Redux action.\n    register({ username, email, password });\n  };\n\n  const handleUsername = (e) => {\n    setFormData({\n      ...formData,\n      username: e.target.value,\n    });\n  };\n\n  const handleEmail = (e) => {\n    setFormData({\n      ...formData,\n      email: e.target.value,\n    });\n  };\n\n  const handlePassword = (e) => {\n    setFormData({\n      ...formData,\n      password: e.target.value,\n    });\n  };\n\n  if (isAuthenticated) {\n    return <Redirect to='/settings' />;\n  }\n\n  return (\n    <section>\n      <div className='authBox'>\n        <h1>Sign Up</h1>\n        <div className='line'></div>\n\n        <form onSubmit={handleSubmit}>\n          <p>Username</p>\n          <input\n            type='text'\n            placeholder='John Doe'\n            onChange={handleUsername}\n            value={username}\n          />\n          <p>Email</p>\n          <input\n            type='email'\n            placeholder='jdoe@gmail.com'\n            onChange={handleEmail}\n            value={email}\n          />\n          <p>Password</p>\n          <input\n            type='password'\n            placeholder='********'\n            onChange={handlePassword}\n            value={password}\n          />\n          <input type='submit' value='Register' />\n        </form>\n      </div>\n\n      <img src={authPic} alt='register' width='569' className='authPic' />\n      <div>\n        Already have an account? <a href='/login'>Login</a>\n      </div>\n    </section>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, { register })(Register);\n","import {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGOUT,\n  SUBMIT_PHONE_NUMBER,\n  DELETE_PHONE_NUMBER,\n} from './types';\nimport axios from 'axios';\n\nexport const login =\n  ({ email, password }) =>\n  async (dispatch) => {\n    try {\n      // configuration of the HTTP request to the backend\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      // Convert JS object into JSON to send to Flask.\n      const body = JSON.stringify({ email, password });\n\n      // Store the logged in user's token into a redux state for authentication purposes.\n      const res = await axios.post(\n        'https://api.reddalerts.com/api/login',\n        body,\n        config\n      );\n      // const res = await axios.post('/api/login', body, config);\n\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    }\n  };\n\nexport const register =\n  ({ username, email, password }) =>\n  async (dispatch) => {\n    try {\n      // configuration of the HTTP request to the backend\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n\n      // Convert JS object into JSON to send to Flask.\n      const body = JSON.stringify({ username, email, password });\n\n      // Store the logged in user's token into a redux state for authentication purposes.\n      const res = await axios.post(\n        'https://api.reddalerts.com/api/register',\n        body,\n        config\n      );\n      // const res = await axios.post('/api/register', body, config);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\nexport const logout = () => async (dispatch) => {\n  dispatch({\n    type: LOGOUT,\n  });\n};\n\n// export const submitPhoneNumber =\n//   ({ id, phoneNumber }) =>\n//   async (dispatch) => {\n//     try {\n//       // configuration of the HTTP request to the backend\n//       const config = {\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//       };\n//       const body = JSON.stringify({\n//         id,\n//         phoneNumber,\n//       });\n\n//       const res = await axios.post(\n//         'https://api.reddalerts.com/api/submitPhoneNumber',\n//         body,\n//         config\n//       );\n\n//       dispatch({\n//         type: SUBMIT_PHONE_NUMBER,\n//         payload: res.data,\n//       });\n//     } catch (err) {}\n//   };\n\n// export const deletePhoneNumber = (id) => async (dispatch) => {\n//   try {\n//     const res = await axios.delete(\n//       'https://api.reddalerts.com/api/deletePhoneNumber',\n//       {\n//         params: {\n//           id,\n//         },\n//       }\n//     );\n\n//     dispatch({\n//       type: DELETE_PHONE_NUMBER,\n//       payload: res.data,\n//     });\n//   } catch (err) {}\n// };\n","import React, { useState } from 'react';\nimport { login } from '../../actions/auth';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport authPic from '../../img/top-design-subreddits.jpeg';\n\nconst Login = ({ login, authState: { isAuthenticated } }) => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  const { email, password } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Send the form data to Redux action.\n    login({ email, password });\n  };\n\n  const handleEmail = (e) => {\n    setFormData({\n      ...formData,\n      email: e.target.value,\n    });\n  };\n\n  const handlePassword = (e) => {\n    setFormData({\n      ...formData,\n      password: e.target.value,\n    });\n  };\n\n  if (isAuthenticated) {\n    return <Redirect to='/dashboard' />;\n  }\n\n  return (\n    <section>\n      <div className='authBox'>\n        <h1>Login</h1>\n        <div className='line'></div>\n        <form onSubmit={handleSubmit}>\n          <input\n            type='email'\n            placeholder='Email'\n            onChange={handleEmail}\n            value={email}\n          />\n          <input\n            type='password'\n            placeholder='Password'\n            onChange={handlePassword}\n            value={password}\n          />\n          <input type='submit' value='Log In' />\n        </form>\n      </div>\n\n      <img src={authPic} alt='login' width='569' className='authPic' />\n      <div>\n        Don't have an account? <a href='/register'>Register</a>\n      </div>\n    </section>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n","import React, { Fragment } from 'react';\nimport { deleteMonitoredSubreddit } from '../../actions/subreddit';\nimport { connect } from 'react-redux';\n\nconst DashboardTable = ({\n  subreddit: { subreddit_name, keywords },\n  deleteMonitoredSubreddit,\n  authState: {\n    loggedInUser: { id },\n  },\n}) => {\n  const handleDelete = (e) => {\n    e.preventDefault();\n    deleteMonitoredSubreddit(id, subreddit_name);\n  };\n\n  const displayKeywords = (keywords) => {\n    return keywords.map((keywordObj) => (\n      <tr>\n        <td>{keywordObj.keyword}</td>\n      </tr>\n    ));\n  };\n\n  return (\n    <Fragment>\n      <div className='subredditTableAndDeleteBtn'>\n        <table className='subredditTable'>\n          <thead>\n            <tr>\n              <th colspan='2'>{subreddit_name}</th>\n            </tr>\n            <tr>\n              <div className='line' />\n            </tr>\n          </thead>\n          <tbody>{displayKeywords(keywords)}</tbody>\n        </table>\n        <button className='deleteBtn' onClick={(e) => handleDelete(e)}>\n          Delete\n        </button>\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, { deleteMonitoredSubreddit })(\n  DashboardTable\n);\n","import {\n  SUBMIT_SUBREDDIT_INFO,\n  SUBMIT_SUBREDDIT_INFO_FAIL,\n  FETCH_SUBREDDITS,\n  FETCH_SUBREDDITS_FAIL,\n  DELETE_SUBREDDIT,\n  DELETE_SUBREDDIT_FAIL,\n  UPDATE_SUBREDDIT_KEYWORDS,\n} from './types';\nimport axios from 'axios';\n\nexport const submitSubredditInfo =\n  ({ id, subredditName, subredditKeywords }) =>\n  async (dispatch) => {\n    try {\n      // configuration of the HTTP request to the backend\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const body = JSON.stringify({\n        id,\n        subredditName,\n        subredditKeywords,\n      });\n\n      const res = await axios.post(\n        'https://api.reddalerts.com/api/submitSubredditInfo',\n        body,\n        config\n      );\n\n      if (res.data.update === 'true') {\n        dispatch({\n          type: UPDATE_SUBREDDIT_KEYWORDS,\n          payload: res.data,\n        });\n      } else {\n        dispatch({\n          type: SUBMIT_SUBREDDIT_INFO,\n          payload: res.data,\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: SUBMIT_SUBREDDIT_INFO_FAIL,\n        payload: { msg: err },\n      });\n    }\n  };\n\nexport const fetchUserSubreddits = (id) => async (dispatch) => {\n  try {\n    const res = await axios.get(\n      'https://api.reddalerts.com/api/fetchSubredditsInfo',\n      {\n        params: {\n          id,\n        },\n      }\n    );\n\n    dispatch({\n      type: FETCH_SUBREDDITS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: FETCH_SUBREDDITS_FAIL,\n      payload: { msg: err },\n    });\n  }\n};\n\nexport const deleteMonitoredSubreddit =\n  (id, subredditName) => async (dispatch) => {\n    try {\n      const res = await axios.delete(\n        'https://api.reddalerts.com/api/deleteMonitoredSubreddit',\n        {\n          params: {\n            id,\n            subredditName,\n          },\n        }\n      );\n\n      dispatch({\n        type: DELETE_SUBREDDIT,\n        payload: res.data,\n      });\n    } catch (err) {}\n  };\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n} from '../../actions/subreddit';\nimport DashboardTable from './DashboardTable';\n\nconst Dashboard = ({\n  submitSubredditInfo,\n  fetchUserSubreddits,\n  subredditState: { subreddits },\n  authState: {\n    loggedInUser: { id },\n    isAuthenticated,\n  },\n}) => {\n  // need to populate the redux state using useEffect before rendering dashboard.\n  useEffect(() => {\n    fetchUserSubreddits(id);\n  }, []);\n\n  const [formData, setFormData] = useState({\n    subredditName: '',\n    subredditKeywords: '',\n  });\n\n  const { subredditName, subredditKeywords } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitSubredditInfo({ id, subredditName, subredditKeywords });\n  };\n\n  const handleSubredditName = (e) => {\n    setFormData({\n      ...formData,\n      subredditName: e.target.value,\n    });\n  };\n\n  const handleSubredditKeywords = (e) => {\n    setFormData({\n      ...formData,\n      subredditKeywords: e.target.value,\n    });\n  };\n\n  const displaySubredditTables = () => {\n    return subreddits.map((subreddit) => (\n      <DashboardTable subreddit={subreddit} />\n    ));\n  };\n\n  if (!isAuthenticated) {\n    return <Redirect to='/register' />;\n  }\n\n  return (\n    <Fragment>\n      <h1 className='defaultHeader'>ReddAlerts</h1>\n      <div className='submissionBox'>\n        <h2>Subreddits To Monitor</h2>\n        <div className='line'></div>\n        <form onSubmit={handleSubmit}>\n          <p>Subreddit (/r/)</p>\n          <input\n            type='text'\n            placeholder='technology'\n            value={subredditName}\n            onChange={handleSubredditName}\n          />\n          <p className='smallText'>One subreddit per submission.</p>\n          <div className='line'></div>\n\n          <p>Keywords</p>\n          <input\n            type='text'\n            placeholder='javascript, reactjs'\n            value={subredditKeywords}\n            onChange={handleSubredditKeywords}\n          />\n          <p className='smallText'>Comma separated list.</p>\n\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n\n      {displaySubredditTables()}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  subredditState: state.subreddit,\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, {\n  submitSubredditInfo,\n  fetchUserSubreddits,\n})(Dashboard);\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logout } from '../../actions/auth';\n\nconst Navbar = ({ authState: { isAuthenticated }, logout }) => {\n  const handleLogout = (e) => {\n    logout();\n  };\n\n  return (\n    <Fragment>\n      {isAuthenticated ? (\n        <div className='navbar'>\n          <Fragment>\n            <Link to='/dashboard'>Subreddits</Link>\n            <Link to='/settings'>Settings</Link>\n            <a onClick={(e) => handleLogout(e)} href='/register'>\n              Logout\n            </a>\n          </Fragment>\n        </div>\n      ) : null}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  authState: state.auth,\n});\n\nexport default connect(mapStateToProps, { logout })(Navbar);\n","import React, { Fragment, useState } from 'react';\nimport { submitPhoneNumber, deletePhoneNumber } from '../../actions/profile';\nimport { connect } from 'react-redux';\n\nconst Settings = ({\n  submitPhoneNumber,\n  deletePhoneNumber,\n  authState: {\n    loggedInUser: { id },\n  },\n  profileState: { profilePhoneNumber },\n}) => {\n  const [formData, setFormData] = useState({\n    phoneNumber: '',\n  });\n\n  const { phoneNumber } = formData;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    submitPhoneNumber({ id, phoneNumber });\n  };\n\n  const handlePhoneNumber = (e) => {\n    setFormData({\n      ...formData,\n      phoneNumber: e.target.value,\n    });\n  };\n\n  const handleDelete = (e) => {\n    e.preventDefault();\n    deletePhoneNumber(id);\n  };\n\n  const displayCurrentPhoneNum = () => {\n    if (profilePhoneNumber) {\n      return (\n        <Fragment>\n          <div className='phoneNumAndDeleteBtn'>\n            <h4>My Phone Number: {profilePhoneNumber}</h4>\n            <button\n              className='phoneNumDeleteBtn'\n              onClick={(e) => handleDelete(e)}\n            >\n              Delete\n            </button>\n          </div>\n        </Fragment>\n      );\n    } else {\n      return (\n        <div className='phoneNumAndDeleteBtn'>\n          <h4>My Phone Number: </h4>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      <h1 className='defaultHeader'>ReddAlerts</h1>\n      <div className='sectionBox'>\n        <h2>Settings</h2>\n        <div className='line' />\n        {displayCurrentPhoneNum()}\n        <form onSubmit={handleSubmit}>\n          <input\n            type='text'\n            placeholder='Phone Number'\n            value={phoneNumber}\n            onChange={handlePhoneNumber}\n          />\n          <input type='submit' value='Submit' />\n        </form>\n        <p>Format: (555)555-5555</p>\n        <p className='smallText'>U.S. phone numbers only.</p>\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  authState: state.auth,\n  profileState: state.profile,\n});\n\nexport default connect(mapStateToProps, {\n  submitPhoneNumber,\n  deletePhoneNumber,\n})(Settings);\n","import { SUBMIT_PHONE_NUMBER, DELETE_PHONE_NUMBER } from './types';\nimport axios from 'axios';\n\nexport const submitPhoneNumber =\n  ({ id, phoneNumber }) =>\n  async (dispatch) => {\n    try {\n      // configuration of the HTTP request to the backend\n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const body = JSON.stringify({\n        id,\n        phoneNumber,\n      });\n\n      const res = await axios.post(\n        'https://api.reddalerts.com/api/submitPhoneNumber',\n        body,\n        config\n      );\n\n      dispatch({\n        type: SUBMIT_PHONE_NUMBER,\n        payload: res.data,\n      });\n    } catch (err) {}\n  };\n\nexport const deletePhoneNumber = (id) => async (dispatch) => {\n  try {\n    const res = await axios.delete(\n      'https://api.reddalerts.com/api/deletePhoneNumber',\n      {\n        params: {\n          id,\n        },\n      }\n    );\n\n    dispatch({\n      type: DELETE_PHONE_NUMBER,\n      payload: res.data,\n    });\n  } catch (err) {}\n};\n","import React, { Fragment } from 'react';\nimport './scss/App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// components\nimport Landing from './components/layout/Landing';\nimport Register from './components/auth/Register';\nimport Login from './components/auth/Login';\nimport Dashboard from './components/dashboard/Dashboard';\nimport Navbar from './components/layout/Navbar';\nimport Settings from './components/profile/Settings';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Fragment>\n          <Navbar />\n          <Route exact path='/' component={Landing} />\n          <Switch>\n            <Route exact path='/register' component={Register} />\n            <Route exact path='/login' component={Login} />\n            <Route exact path='/dashboard' component={Dashboard} />\n            <Route exact path='/settings' component={Settings} />\n          </Switch>\n        </Fragment>\n      </Router>\n    </Provider>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}